
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array twotothepoint; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        let n = 16;
        let twotothepoint = Array.new(n);
        let twotothepoint[0] = 1;
        let twotothepoint[1] = 2;
        let twotothepoint[2] = 4;
        let twotothepoint[3] = 8;
        let twotothepoint[4] = 16;
        let twotothepoint[5] = 32;
        let twotothepoint[6] = 64;
        let twotothepoint[7] = 128;
        let twotothepoint[8] = 256;
        let twotothepoint[9] = 512;
        let twotothepoint[10] = 1024;
        let twotothepoint[11] = 2048;
        let twotothepoint[12] = 4096;
        let twotothepoint[13] = 8192;
        let twotothepoint[14] = 16384;
        let twotothepoint[15] = -32767;
        let twotothepoint[15] = twotothepoint[15] - 1;
        return;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) 
    {
        var int sum,i;
        var boolean val;
        var int shiftedX;

        if((x < 0) & (y < 0))
        {
            let x = -x;
            let y = -y;
        }

        let sum = 0;
        let shiftedX = x;
        let i = 0;

        

        while(i < n)
        {
            let val = Math.bit(y,i);
            if(val = 1)
            {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
        
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
        var int q,m,neg_x,neg_y,abs_x, abs_y, prod;

        let neg_x = x < 0;
        let neg_y = y < 0;

        let x = Math.abs(x);
        let y = Math.abs(y);


        if(y > x)
        {
            return 0;
        }
        let q = (x / (y + y));
        if((x-(2*q*y)) < y)
        {
            let prod = q + q;
        }

        else
        {
            let prod = q + q + 1;
        }

        if(neg_x = neg_y)
        {
            return prod;
        }
        else
        {
            return -prod;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y,j,val,q;
        let y = 0;
        let j = 7;

        while(j > -1)
        {
            let q = y + twotothepoint[j];
            let val = q * q;
            if( (val > 0) & (((val < x) | (val = x) )))
            {
                let y = q;
            } 
            let j = j - 1;
        }

        return y;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
        if(a > b)
        {
            return a;
        }
        return b;
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if(a < b)
        {
            return a;
        }
        return b;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0)
        {
            return -x;
        }
        return x;
    }

    function int mod(int a, int b) // generates mod of two numbers
    {
        var int r;

        let r = (a - (b * (a / b)));

        return r;
    }

    function int pow(int a,int n)
    {
        var int x;

        if(n = 0)
        {
            return 1;
        }

        let x = Math.pow(a,n/2);

        if(Math.mod(n,2) = 0)
        {
            return x*x;
        }
        else
        {
            return a*x*x;
        }
    }

    function boolean bit(int x,int i)
    {
        var int v;

        let v = twotothepoint[i] & x;

        if(v > 0)
        {
            return 1;
        }
        return 0;
    }
}