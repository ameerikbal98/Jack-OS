class Memory
{
    static Array ram;
    static Array heap;
    static Array freeList;
    static Array lastPointer;

    function void init()
    {
        let ram = 0;
        let heap = 2048;
        let freeList = 2048;
        let lastPointer = 2048;
        let heap[0] = 14335;
        let heap[1] = 0;
        return 0;
    }

    function int peek(int addr)
    {
        return ram[addr];
    }

    function void poke(int val,int addr)
    {
        let ram[addr] = val;
        return 0;
    }


    function Array alloc(int n) //the memory returned by this function can have rubbish values in it.
    {
        //search the freelist
        var Array listPointer;
        var Array currentFind,prevBlock,prevCurrentBlock,returnAddr,tmp;


        let listPointer = freeList;

        while((~(listPointer = 0))) // Best fit searching algorithm seraches the entire list to find the best fit memory block check until the list pointer becomes zero
        {
            
            if((listPointer[0] > n) & (currentFind = 0)) //if its the first find
            {
                let prevCurrentBlock = prevBlock; //we will store the previous block of the currently found suitable block
                let currentFind = listPointer;
            }
            else
            {
                if((listPointer[0] < currentFind) & (listPointer[0] > n)) // check if the current block is smaller than the last found block and also large enough to fit the requested block
                {
                    let prevCurrentBlock = prevBlock; //we will store the previous block of the currently found suitable block
                    let currentFind = listPointer;
                }
            }
            let prevBlock = listPointer; //to keep track of the previous block visited
            let listPointer = listPointer[1]; //takes the next block in the list
        }

        if(currentFind = 0)
        {
            return 0; //0 means error and no memory block is found needs defragmentation
        }

        if(currentFind[0] > (n + 2)) //if the found block is bigger than the required block we will partition it two block and insert the second memory block back to the list
                               // and return the first block address
        {
            let currentFind[0] = currentFind[0] - (n + 1);
            let returnAddr = currentFind + currentFind[0] + 1;
            let currentFind[currentFind[0]] = n + 1;
        }
        else
        {
            if((currentFind[0] = (n + 1))) //if the block found is exactly the size of the required size then return the entire block
            {
                if(prevCurrentBlock = 0) //if the found block is the first block with no previous block
                {
                    let freeList = currentFind[1];
                    let returnAddr = currentFind + 1;
                    let currentFind[0] = n + 1;
                }
                else
                {
                    let prevCurrentBlock[1] = currentFind[1];
                    let returnAddr = currentFind + 1;
                    let currentFind[0] = n + 1;
                }
            }
            else
            {
                if(currentFind[0] = (n + 2))
                {
                    if(prevCurrentBlock = 0) //if the found block is the first block with no previous block
                    {
                        let freeList = currentFind[1];
                        let returnAddr = currentFind + 1;
                        let currentFind[0] = n + 2;
                    }
                    else
                    {
                        let prevCurrentBlock[1] = currentFind[1];
                        let returnAddr = currentFind + 1;
                        let currentFind[0] = n + 2;
                    }
                }
            }
        }

        return returnAddr;
    }


    function void dealloc(Array o)
    {
        var Array currentFind;

        var int n,i;

        let currentFind = freeList;

        while(~(currentFind[1] = 0))
        {
            let currentFind = currentFind[1];
        }

        let n = o[-1];

        let i = 0;
        while(i < n)
        {
            let o[i] = 0;
            let i = i + 1;
        }

        let currentFind[1] = o - 1;
        return 0;
    }

    function void print_list()
    {
        var Array currentFind;

        let currentFind = freeList;
        while(~(currentFind = 0))
        {
            do Output.printInt(currentFind[0]);
            do Output.println();
            let currentFind = currentFind[1];
        }
        return 0;

    }
    
}

