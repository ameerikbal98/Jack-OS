// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory 
{
    static Array ram;
    static Array heap;
    static Array lastPointer;

    /** Initializes the class. */
    function void init() 
    {
        let ram = 0;
        let heap = 2048;
        let lastPointer = 16384;
        let heap[0] = 0;
        let heap[1] = lastPointer - heap - 2;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) 
    {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) 
    {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function Array alloc(int size) 
    {
        var Array pointer,found_block,return_block;

        let pointer = heap;

        while(~(pointer = 0)) // best fit algorithm
        {
            if(pointer[1] > (size + 2))
            {
                if(~(found_block = 0))
                {
                    if(pointer[1] < found_block[1])
                    {
                        let found_block = pointer;
                    }
                }
                else
                {
                    let found_block = pointer;
                }
            }
            let pointer = pointer[0];
        }

        if(~(found_block = 0))
        {
            let return_block = found_block + 2 + found_block[1] - size - 2;
            let found_block[1] = found_block[1] - size - 2;
            let return_block[0] = 0;
            let return_block[1] = size;

        }
        return return_block + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) 
    {
        var Array pointer;

        let pointer = heap;

        while(~(pointer[0] = 0))
        {
            let pointer = pointer[0];
        }

        let pointer[0] = o - 2;
        return;
    }    
}
