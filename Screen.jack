// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int screen_start,screen_end;
    static boolean colour;
    static Array twotothepoint; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)


    /** Initializes the Screen. */
    function void init() {
        let screen_start = 16384; //address of the first screenspace memory;
        let screen_end = 24576; //starte of the next memory segment, this is not part of screen memory
        let colour = true;
        let twotothepoint = Array.new(16);

        let twotothepoint[0] = 1;
        let twotothepoint[1] = 2;
        let twotothepoint[2] = 4;
        let twotothepoint[3] = 8;
        let twotothepoint[4] = 16;
        let twotothepoint[5] = 32;
        let twotothepoint[6] = 64;
        let twotothepoint[7] = 128;
        let twotothepoint[8] = 256;
        let twotothepoint[9] = 512;
        let twotothepoint[10] = 1024;
        let twotothepoint[11] = 2048;
        let twotothepoint[12] = 4096;
        let twotothepoint[13] = 8192;
        let twotothepoint[14] = 16384;
        let twotothepoint[15] = -32767;
        let twotothepoint[15] = twotothepoint[15] - 1;
        return;

    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = screen_start;
        while(i < screen_end)
        {
            do Memory.poke(i,0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let colour = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address,val,scr_val;
        
        let address = ((32 * y) + (x / 16));
        let val = Memory.peek(screen_start + address);
        let scr_val = twotothepoint[Math.mod(x,16)];
        if(~colour) //if the colour is false or white then we not the scr_val;
        {
            let scr_val = ~scr_val;
            let val = val & scr_val;
        }
        else
        {
            let val = val | scr_val;
        }
        do Memory.poke(screen_start + address,val);
        return;
    }


    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {

        var int dx,dy,diff,a,b,x,y,m;

        let a = 0;
        let b = 0;
        let diff = 0;

        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);

        if(x2 = x1)
        {
            let x = x1;
            if(y2 > y1)
            {
                let y = y1;
            }
            else
            {
                let y = y2;
            }
            while( ~(b > dy) ) //to make sure a and b are less the dx and dy respectively.
            {
                do Screen.drawPixel(x ,y + b);

                let b = b + 1;
            }
            return;
        }

        if(y2 = y1)
        {
            let y = y1;
            if(x2 > x1)
            {
                let x = x1;
            }
            else
            {
                let x = x2;
            }
            while( ~(a > dx) ) //to make sure a and b are less the dx and dy respectively.
            {
                do Screen.drawPixel(x + a,y);

                let a = a + 1;
            }
            return;
        }

        if( ((x2 > x1) & (y2 < y1)) | ((x2 < x1) & (y1 < y2)) )
        {
            if(x1 < x2)
            {
                let x = x1;
                let y = y1;
            }
            else
            {
                let x = x2;
                let y = y2;
            }
            while( (~(a > dx)) & (~(b > dy)) ) //to make sure a and b are less the dx and dy respectively.
            {
                do Screen.drawPixel(x + a,y - b);

                if(diff < 0) 
                {
                    let a = a + 1;
                    let diff = diff + dy;
                }
                else
                {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
            return;
        }

        if( ((x2 > x1) & (y2 > y1)) | ((x1 > x2) & (y1 > y2)) )
        {
            if(x1 < x2)
            {
                let x = x1;
                let y = y1;
            }
            else
            {
                let x = x2;
                let y = y2;
            }
            while( (~(a > dx)) & (~(b > dy)) ) //to make sure a and b are less the dx and dy respectively.
            {
                do Screen.drawPixel(x + a,y + b);

                if(diff < 0) 
                {
                    let a = a + 1;
                    let diff = diff + dy;
                }
                else
                {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
            return;
        }
        return;
    }


    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) 
    {
        var int width,i;

        let width = Math.abs(y2 - y1);
        let i = 0;

        while( ~(i > width) )
        {
            do Screen.drawLine(x1,y1+i,x2,y1+i);
            let i = i + 1;
        }
        return;
    }


    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) 
    {
        var int dy,x_offset;

        let dy = -r;

        while(~(dy > r))
        {
            let x_offset = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(x - x_offset,y + dy,x + x_offset, y + dy);
            let dy = dy + 1;
        }
        return;
    }

}
